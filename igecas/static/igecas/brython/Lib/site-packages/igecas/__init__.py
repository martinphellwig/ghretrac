from browser import document, alert, ajax, window
from browser.html import INPUT, BUTTON, DIV, IFRAME, HTML, INPUT, FORM
import json

_GLOBAL = {'identifier':0,
           'calls':list()}

def _get_url_api(path='api'):
    tmp = list()
    to_append = window.location.pathname
    
    while not to_append.lower().endswith('igecas'):
        done = to_append.rsplit('/', 1)[0]
        if done == to_append:
            alert('Could not initialise correct API path.')
            break
        
        to_append = done
    
    tmp.append(to_append)
    tmp.append(path)
    
    for index, value in enumerate(tmp):
        while value.startswith('/'):
            value = value[1:]
        
        while value.endswith('/'):
            value = value[:-1]
                
        tmp[index] = value
    
    url = '/'.join(tmp)
    return(url)

    
class _Call(object):
    def __init__(self, api, method):
        self.api = api
        self.method = method
        
    def __getattr__(self, name):
        self.method += '.' + name
        return self
    
    def __call__(self, *args, **kwargs):
        for index, value in enumerate(args):
            kwargs[str(index)] = value
        
        return self.api._remote_call(self.method, kwargs)
        

class API(object):
    def __init__(self, _callback_success, _callback_problem, path='api'):
        self._callback_success = _callback_success
        self._callback_problem = _callback_problem
        if path != None:
            self._url = _get_url_api(path)
        else:
            self._url = None
                    
        self._method = ''
        self._response = None
    
    def __getattr__(self, name):
        call = _Call(self, name)
        return call

    
    def _set_return_value(self, response):
        if response.status != 200:
            document.open()
            document.write(response.text)
            document.close()
        else:
            rpc = json.loads(response.text)
            if 'error' in rpc and rpc['error'] != None:
                self._callback_problem(rpc)
            else:
                self._callback_success(rpc['result'])

                
    def _remote_call(self, method, arguments):
        call = {'jsonrpc':'2.0',
                'method':method,
                'params':arguments,
                'id':_GLOBAL['identifier']}
        
        request = ajax.ajax()
        request.bind('complete', self._set_return_value)
        request.open('POST', self._url, True)
        request.set_header('content-type', 'application/json-rpc')
        request.send(json.dumps(call))            

                
class Login(object):
    def __init__(self, _callback_success, _callback_problem, 
                 wrong_credentials=False):
        self.div = None
        self.form = None
        
        self._callback_success = _callback_success
        self._callback_problem = _callback_problem
        if wrong_credentials:
            self.failed = True
        else:
            self.failed = False
        self.identifier = INPUT(id='identifier', placeholder='identifier')
        self.passphrase = INPUT(id='passphrase', type='password', 
                                placeholder='passphrase')
        
    def login(self):
        if self.failed:
            text = "Identifier and/or Password does not match."
        else:
            text = "Authentication Required"
        
        self.div = DIV(text, Class='box', id='authentication')
        self.form = FORM(id='form')
        self.form.bind('submit', self.submit)
        self.form <= self.identifier
        self.form <= self.passphrase
        self.form <= BUTTON(id='submit', 'submit')
        self.div <= self.form
        document <= self.div
        
    
    def submit(self, event):
        event.preventDefault()
        self.div.parentNode.removeChild(self.div)
        api = API(self._callback_success, self._callback_problem) 
        api.django.login(self.identifier.value, self.passphrase.value)
        

def _callback_success(*args, **kwargs):
    alert(args)
    
def _callback_login_executed(success):
    if success:
        api = API(_callback_success, _callback_problem)
        api.django.ping()
    else:
        _callback_problem()
        
def _callback_problem(*args, **kwargs):
    login = Login(_callback_login_executed, _callback_problem)
    login.login()
    
def _callback_ignored(*args, **kwargs):
    pass

def main():
    api = API(_callback_success, _callback_problem)
    api.django.ping()
    
    api = API(_callback_ignored, _callback_ignored)
    api.django.logout()
    
    
    
